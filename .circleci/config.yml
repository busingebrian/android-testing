version: 2.1
config_android:
  docker:
  - image: circleci/android:api-30
  working_directory: ~/project
  environment:
    JAVA_TOOL_OPTIONS: "-Xmx1024m -XX:+UnlockExperimentalVMOptions -XX:+UseContainerSupport"
    GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Djava.util.concurrent.ForkJoinPool.common.parallelism=2 -Dkotlin.incremental=false"
    TERM: dumb
setup_ftl:
- run:
    name: Authorize gcloud and set config defaults
    command: |
      echo $GCLOUD_SERVICE_KEY | base64 -di > ${HOME}/gcloud-service-key.json
      sudo gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
      sudo gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
jobs:
  build_and_setup:
    docker:
    - image: circleci/android:api-30
    working_directory: ~/project
    environment:
    - JAVA_TOOL_OPTIONS: "-Xmx1024m -XX:+UnlockExperimentalVMOptions -XX:+UseContainerSupport"
    - GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Djava.util.concurrent.ForkJoinPool.common.parallelism=2 -Dkotlin.incremental=false"
    - TERM: dumb
    steps:
    - checkout
    - run:
        name: Build test and lint
        command: |
          ./gradlew dependencies testDebugUnitTest testReleaseUnitTest lintReportDebug
    - run:
        name: Save test results
        command: |
          mkdir -p ~/test-results/junit/
          find . -type f -regex "./.*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
        when: always
    - store_test_results:
        path: ~/test-results
    - store_artifacts:
        path: ~/junit
        destination: tests
    - store_artifacts:
        path: ./app/build/reports
        destination: reports/
    - persist_to_workspace:
        root: .
        paths:
        - ./app/build
  run_ftl:
    docker:
    - image: circleci/android:api-30
    working_directory: ~/project
    environment:
    - JAVA_TOOL_OPTIONS: -Xmx1024m
    - GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dkotlin.incremental=false
    - GCLOUD_SERVICE_KEY:
        {   "type": "service_account",   "project_id": "android-testing-365607",   "private_key_id": "3cf36522bc261365571c90584adf9195ff4d3034",   "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC/QmA334cR1WLm\nc+uniBSgN/ygfuRb0cyn21NyCQKH2RjANuFFhfyBlzOc9noS487aZNd0km7evpTD\n1DbfNG+N/NBOvmJvgwy22HB3GDlMncNt6PusfObitcjVf/fPyVMwquzASVtXmusE\nGq+NfXbIY4yo/m02mCa/+FXmOSQE3crNccAChJogR0JuAZBSaW8i8PpNyZlrIQ+l\n7GwKQQajyksjwvQYeK8sit1/D87ZxBXNtasVGwUT/RVdAUsnS9hKtl6KWz5n6V3b\nPo0JAIeBTSaiVoA03pZDJ/HSQwgDmJgHDf8mMe0z5o0G95RrhurXEzQ3Mo3m/9YQ\nlNMjp/9zAgMBAAECggEAMQ6rc2loUdCz/3x4U456C+aQa/JgTJTxs5R0QOnCtmmf\nCZ6KBbUqYWsRGA+4nCPGqQn4obP1sDieG+TQ9kuS2Y6hN7FpukSY/EVkA4g5GkfV\nGtoJw+J9rmUGUIz0WV3ActlExMWMIlpgMbtOkDJAR4IRUD+Cb+BzAAaIsfayIHT5\nTYq7QmJ4ZnUYGNqMBaClx81/yL9uS+5X1iG/15IOkT/3j5d7SR5XlScw8V7vLmXl\ng/p55tYcbZqQ2Vf84mz5EmcsLEse4XJMcTLLdbKgCk4VFTKEd1WG8KywFiMbnkRW\nOMEUSUoLkCLdcJeVEUJe3O27/sLIJIeg/373DSuSkQKBgQDzG8Zveudf4aUGu6ta\nv2orD3YtaG6JcQE0YDigkLGzdq+URVWbJaCn7cejyYG/FYGd/AGIPY58CvTH+PJ6\ns8Jjz5Rt+RZlnaQFE64EAzkgOaA1t1zxGuxe3dMJ4SSyKdWIpyAvT1VQCsUijN17\nsSfby7/uBStHZSdaItMvfNYDrQKBgQDJZr3piLb7q3AHpQRLUZAiK16p1b4gZ1ZZ\ne7X1Lqo/a2II5i2V2wgE/7urnSEimZJMyKhhkMtxQHs+f4x7EjH05tQcUDilTq9A\nTIaQwF0b2gZQecx8dpmEsgARmI8Ire75H6xPqopNocS1QoAbF0bnVmz/SBF3EV4U\nkUF+bglznwKBgFGCLXzxEyRFjkP8pg4OAXWggHnm+rCgL8w0uqey+7F1CJdIy9Px\nwLSs93OFuzeq6UNj28um/9+8+KcXY40aOgGm9lgM3KKDQRvmpkB4KC4SxBFegg3g\nfgGsk/ZLAzes6QghKJxUGAF3KvNTkWrIUdnSrW4LU6BjXNdOt8nDLCodAoGAGOa6\nHnDH5xAIVvmhMUrRXlgsaSVDT7BXLdMs6Tau2A6H3X/QLRIayLtx0cMowKVqQFIi\n94U2kjcdxdlxXhoe0R/lI+cLSe0ToAiWLrmKCZKIa1TT4qOrUYvMlGBfdvxCaszu\nuh7k4Lpanuqs+iyDmMDH0zxu5GDiV/qptV8XjhMCgYEApBt2FiI61ZsQseFOKBxs\nQshyDCp8E1fcBTfJg9uXWt44V/k6U5gV50r2ka1O6+NLdDxIkWVO9AR1HYiZD8Sj\n6E8Vyf82EaP4LQGxP4x7vRDUVsPucSoh0sD7sIiAjzIj4NC7EwrPsMBYcz8hnHSx\nl8WytMidz9mkiiNAQkedXws=\n-----END PRIVATE KEY-----\n",   "client_email": "busingebrian@android-testing-365607.iam.gserviceaccount.com",   "client_id": "105927848575409649670",   "auth_uri": "https://accounts.google.com/o/oauth2/auth",   "token_uri": "https://oauth2.googleapis.com/token",   "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",   "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/busingebrian%40android-testing-365607.iam.gserviceaccount.com" }
    - TERM: dumb
    steps:
    - attach_workspace:
        at: .
    - run:
        name: Authorize gcloud and set config defaults
        command: |
#          echo $GCLOUD_SERVICE_KEY | base64 -di > ${HOME}/gcloud-service-key.json
#          sudo gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
#          sudo gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
          set -ueo pipefall
          make zones
          make pods
    - run:
        name: Test with Firebase Test Lab
        command: |
          BUILD_DIR=build_${CIRCLE_BUILD_NUM}
          sudo gcloud firebase test android run \
            --app app/build/outputs/apk/mock/debug/app-mock-debug.apk \
            --test app/build/outputs/apk/androidTest/mock/debug/app-mock-debug-androidTest.apk \
            --results-bucket cloud-test-${GOOGLE_PROJECT_ID}-testingcodelab \
            --results-dir=${BUILD_DIR}
    - run:
        name: Download results
        command: |
          BUILD_DIR=build_${CIRCLE_BUILD_NUM}
          sudo pip install -U crcmod
          mkdir firebase_test_results
          sudo gsutil -m mv -r -U `sudo gsutil ls gs://cloud-test-${GOOGLE_PROJECT_ID}-testingcodelab/${BUILD_DIR} | tail -1` firebase_test_results/ | true
    - store_artifacts:
        path: firebase_test_results
workflows:
  version: 2.1
  build_and_test:
    jobs:
    - build_and_setup
    - run_ftl:
        requires:
        - build_and_setup
